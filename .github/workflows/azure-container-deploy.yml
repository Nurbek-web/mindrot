name: Build and Deploy to Azure Container Instances

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image
        run: |
          cd generate
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/yourimage:latest .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/yourimage:latest

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Delete Existing Container Group
        run: |
          az container delete --resource-group BrainrotGenerator --name brainrot-container --yes

      - name: Deploy to Azure Container Instances
        run: |
          az container create --resource-group BrainrotGenerator --name brainrot-container --image ${{ secrets.ACR_LOGIN_SERVER }}/yourimage:latest --cpu 4 --memory 14 --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} --registry-username ${{ secrets.ACR_USERNAME }} --registry-password ${{ secrets.ACR_PASSWORD }} --restart-policy Never --environment-variables GROQ_API_KEY=${{ secrets.GROQ_API_KEY }} OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} ELEVEN_API_KEY=${{ secrets.ELEVEN_API_KEY }} UNREAL_SPEECH_API_KEY=${{ secrets.UNREAL_SPEECH_API_KEY }} NEETS_API_KEY=${{ secrets.NEETS_API_KEY }} AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}

      - name: Monitor Container Status
        run: |
          for i in {1..10}; do
            STATUS=$(az container show --resource-group BrainrotGenerator --name brainrot-container --query "instanceView.state" -o tsv)
            echo "Current Status: $STATUS"
            if [ "$STATUS" = "Running" ]; then
              break
            fi
            if [ $i -eq 10 ]; then
              echo "Container is not in 'Running' state after 10 attempts"
              exit 1
            fi
            sleep 30
          done

      - name: Get Logs
        run: |
          az container logs --resource-group BrainrotGenerator --name brainrot-container
